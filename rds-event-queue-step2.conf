
input {
    sqs {
        region => "ca-central-1"
        queue => "rds-event-queue-2"
        access_key_id => "******************"
        secret_access_key => "******************"
        threads => 1
        polling_frequency => 5
    }
}

filter {
    if [source]=="aws.rds" {

        # Time processing and mapping
        date{
            match => ["[detail][Date]", "ISO8601"]
            target => "finalTime"
        }
        ruby { code => "event.set('[GuardRecordWorking][time][timstamp]', event.get('finalTime').to_i)" }


        # Mapping event fields to Guardium fields
        if [detail][SourceIdentifier] {
            mutate { add_field => { "[GuardRecordWorking][dbName]" => "%{[detail][SourceIdentifier]}"} }
        }
        else {
            mutate { add_field => { "[GuardRecordWorking][dbName]" => "NA"} }
        }
        if [detail][Message] {
            mutate { add_field => { "[GuardRecordWorking][data][originalSqlCommand]" => "%{[detail][Message]}"} }
            mutate { add_field => { "[GuardRecordWorking][data][construct][fullSql]" => "%{[detail][Message]}" } }
            mutate { add_field => { "[GuardRecordWorking][data][construct][redactedSensitiveDataSql]" => "%{[detail][Message]}" } }
        }
        else {
            mutate { add_field => { "[GuardRecordWorking][data][originalSqlCommand]" => "NA" } }
            mutate { add_field => { "[GuardRecordWorking][data][construct][fullSql]" => "NA" } }
            mutate { add_field => { "[GuardRecordWorking][data][construct][redactedSensitiveDataSql]" => "NA" } }
        }
        if [id] {
            mutate {add_field => { "[GuardRecordWorking][sessionId]" => "%{id}" } }
        }
        else {
            mutate {add_field => { "[GuardRecordWorking][sessionId]" => "NA" } }
        }


        # Constants
        mutate { add_field => { "[GuardRecordWorking][accessor][serverHostName]" => "AWS RDS" } }
        mutate { add_field => { "[GuardRecordWorking][accessor][language]" => "FREE_TEXT" } }
        mutate { add_field => { "[GuardRecordWorking][accessor][dataType]" => "CONSTRUCT" } }
        mutate { add_field => { "[GuardRecordWorking][time][minOffsetFromGMT]" => 0 } }
        mutate { add_field => { "[GuardRecordWorking][time][minDst]" => 0 } }
        mutate { add_field => { "[GuardRecordWorking][sessionLocator][serverIp]" => "200.200.200.200" } }
        mutate { add_field => { "[GuardRecordWorking][sessionLocator][serverPort]" => 100 } }
        mutate { add_field => { "[GuardRecordWorking][sessionLocator][clientIp]" => "200.200.200.200" } }
        mutate { add_field => { "[GuardRecordWorking][sessionLocator][clientPort]" => 100 } }
        ruby { code => 'event.set("[GuardRecordWorking][sessionLocator][clientIpv6]", nil)' }
        ruby { code => 'event.set("[GuardRecordWorking][sessionLocator][serverIpv6]", nil)' }
        mutate { add_field => { "[GuardRecordWorking][sessionLocator][isIpv6]" => false } }
        mutate { add_field => { "[GuardRecordWorking][accessor][serverType]" => "AWS RDS Events"} }
        mutate { add_field => { "[GuardRecordWorking][accessor][serverOS]" => ""} }
        mutate { add_field => { "[GuardRecordWorking][accessor][clientOs]" => ""} }
        mutate { add_field => { "[GuardRecordWorking][accessor][clientHostName]" => "" } }
        mutate { add_field => { "[GuardRecordWorking][accessor][commProtocol]" => "SQS Queue"} }
        mutate { add_field => { "[GuardRecordWorking][accessor][dbProtocol]" => "AWS Native Audit Events" } }
        mutate { add_field => { "[GuardRecordWorking][accessor][dbProtocolVersion]" => ""} }
        mutate { add_field => { "[GuardRecordWorking][accessor][osUser]" => "" } }
        mutate { add_field => { "[GuardRecordWorking][accessor][sourceProgram]" => ""} }
        mutate { add_field => { "[GuardRecordWorking][accessor][clientMac]" => ""} }
        mutate { add_field => { "[GuardRecordWorking][accessor][serverDescription]" => "" } }
        mutate { add_field => { "[GuardRecordWorking][accessor][serviceName]" => ""} }
        mutate { add_field => { "[GuardRecordWorking][accessor][dbUser]" => "NA" } }
        mutate { add_field => { "[GuardRecordWorking][appUserName]" => "" } }
        ruby { code => 'event.set("[GuardRecordWorking][exception]", nil)' }
        
        # Type Conversion
        mutate {
            convert => { "[GuardRecordWorking][time][minOffsetFromGMT]" => "integer"}
            convert => { "[GuardRecordWorking][time][minDst]" => "integer"}
            convert => { "[GuardRecordWorking][sessionLocator][clientPort]" => "integer"}
            convert => { "[GuardRecordWorking][sessionLocator][serverPort]" => "integer"}
            convert => { "[GuardRecordWorking][sessionLocator][isIpv6]" => "boolean"}
        }

        # Encode JSON
        json_encode {
            source => "[GuardRecordWorking]"
            target => "[GuardRecord]"
        }
    }
 }

output {
  stdout { codec => rubydebug }
}

